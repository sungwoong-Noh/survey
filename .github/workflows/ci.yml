name: Survey CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 설정 (Set up JDK)    #   - actions/setup-java@v4 액션을 사용해서 Java 환경을 설정해.
      #   - 'temurin'은 Eclipse Temurin 배포판을 의미해. 가장 표준적이야.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 캐싱 설정 (Optional, but Recommended for speed)    #   - actions/cache@v4 액션을 사용해서 Gradle이 다운로드한 라이브러리(dependencies)들을 캐싱해.
      #   - 이렇게 하면 다음 실행부터는 라이브러리를 다시 다운받지 않아서 빌드 속도가 엄청나게 빨라져
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches  
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-  

      # 4. Gradle 실행 권한 부여 (Grant execute permission for gradlew)     #   - gradlew 스크립트를 실행하려면 실행 권한이 필요해.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew


      # 5. Gradle로 빌드 및 테스트 실행 (Build and Test with Gradle)    #   - 드디어 핵심 단계! gradlew 스크립트를 사용해서 'build' 태스크를 실행해.
      #   - Gradle의 'build' 태스크는 기본적으로 컴파일(compileJava)과 테스트(test)를 모두 포함하고 있어.
      #   - 테스트가 하나라도 실패하면 이 단계에서 워크플로우가 실패 처리되고, PR에 빨간불이 들어올 거야.
      - name: Build and Gradle
        run: ./gradlew build


      # 6. AWS 자격증명 설정 (Configure AWS credentials)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2


      # 7. AWS ECR 로그인 (Login to Amazon ECR)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Docker 이미지 빌드 및 ECR 푸시 (Build and push Docker image to ECR)
      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: public.ecr.aws/o3q0p5x7/e-commerce_1
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed successfully!"
          echo "Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
      